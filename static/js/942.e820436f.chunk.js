"use strict";(self.webpackChunkwork_item_analytics=self.webpackChunkwork_item_analytics||[]).push([[942],{4942:(e,t,a)=>{a.d(t,{adoAnalyticsService:()=>o});const o=new class{getAnalyticsBaseUrl(e){return"https://analytics.dev.azure.com/".concat(e,"/_odata/v4.0-preview")}getAuthHeaders(e){return{Authorization:"Basic ".concat(btoa(":".concat(e))),"Content-Type":"application/json",Accept:"application/json"}}async fetchAnalyticsWorkItems(e,t,a,o,n){try{var s;const c=this.getAnalyticsBaseUrl(e),r=this.getAuthHeaders(a);let i="Project/ProjectName eq '".concat(t,"'");if(o&&(i+=" and startswith(AreaPath, '".concat(t,"\\").concat(o,"')")),n){const e=parseInt(n.startDate.replace(/-/g,"")),t=parseInt(n.endDate.replace(/-/g,""));i+=" and DateSK ge ".concat(e," and DateSK le ").concat(t)}const l=["WorkItemId","Title","WorkItemType","State","StateCategory","AssignedToUserName","CreatedDate","ChangedDate","ClosedDate","ResolvedDate","ActivatedDate","StateChangeDate","IterationPath","AreaPath","StoryPoints","Priority","CycleTimeDays","LeadTimeDays","Age","DateSK","CompletedWork","RemainingWork","OriginalEstimate","BusinessValue","Risk","Severity","ValueArea","BoardColumn","Tags"].join(","),d="".concat(c,"/WorkItems?$filter=").concat(encodeURIComponent(i),"&$select=").concat(l,"&$orderby=ChangedDate desc");console.log("\ud83d\udd27 Analytics API: Fetching work items with pre-calculated fields:",d);const m=await fetch(d,{headers:r});if(!m.ok)return{success:!1,error:"Analytics API failed: ".concat(m.status," ").concat(m.statusText)};const g=await m.json();return{success:!0,data:g.value||[],count:(null===(s=g.value)||void 0===s?void 0:s.length)||0}}catch(c){return{success:!1,error:c instanceof Error?c.message:"Unknown error occurred"}}}async fetchWorkItemSnapshots(e,t,a,o,n){try{var s;const c=this.getAnalyticsBaseUrl(e),r=this.getAuthHeaders(a);let i="Project/ProjectName eq '".concat(t,"' and IsLastRevisionOfDay eq true");if(o&&(i+=" and startswith(AreaPath, '".concat(t,"\\").concat(o,"')")),n){const e=parseInt(n.startDate.replace(/-/g,"")),t=parseInt(n.endDate.replace(/-/g,""));i+=" and DateSK ge ".concat(e," and DateSK le ").concat(t)}const l=["WorkItemId","Date","DateSK","State","StateCategory","StoryPoints","CycleTimeDays","LeadTimeDays","IsLastRevisionOfDay"].join(","),d="".concat(c,"/WorkItemSnapshot?$filter=").concat(encodeURIComponent(i),"&$select=").concat(l,"&$orderby=DateSK desc");console.log("\ud83d\udd27 Analytics API: Fetching historical snapshots:",d);const m=await fetch(d,{headers:r});if(!m.ok)return{success:!1,error:"Analytics snapshots failed: ".concat(m.status," ").concat(m.statusText)};const g=await m.json();return{success:!0,data:g.value||[],count:(null===(s=g.value)||void 0===s?void 0:s.length)||0}}catch(c){return{success:!1,error:c instanceof Error?c.message:"Unknown error occurred"}}}async fetchAggregatedAnalytics(e,t,a,o,n){try{var s,c,r,i;const l=this.getAnalyticsBaseUrl(e),d=this.getAuthHeaders(a);let m="Project/ProjectName eq '".concat(t,"'");if(o&&(m+=" and startswith(AreaPath, '".concat(t,"\\").concat(o,"')")),n){const e=parseInt(n.startDate.replace(/-/g,"")),t=parseInt(n.endDate.replace(/-/g,""));m+=" and DateSK ge ".concat(e," and DateSK le ").concat(t)}const g=[fetch("".concat(l,"/WorkItems?$filter=").concat(encodeURIComponent(m),"&$apply=aggregate($count as TotalItems, StoryPoints with sum as TotalStoryPoints)"),{headers:d}),fetch("".concat(l,"/WorkItems?$filter=").concat(encodeURIComponent(m+" and StateCategory eq 'Completed'"),"&$apply=aggregate($count as CompletedItems, StoryPoints with sum as CompletedStoryPoints)"),{headers:d}),fetch("".concat(l,"/WorkItems?$filter=").concat(encodeURIComponent(m+" and CycleTimeDays ne null"),"&$apply=aggregate(CycleTimeDays with average as AvgCycleTime)"),{headers:d}),fetch("".concat(l,"/WorkItems?$filter=").concat(encodeURIComponent(m+" and LeadTimeDays ne null"),"&$apply=aggregate(LeadTimeDays with average as AvgLeadTime)"),{headers:d}),fetch("".concat(l,"/WorkItems?$filter=").concat(encodeURIComponent(m+" and StateCategory eq 'Completed'"),"&$apply=groupby((CompletedDateSK),aggregate($count as ItemsCompleted, StoryPoints with sum as StoryPointsCompleted))&$orderby=CompletedDateSK desc&$top=12"),{headers:d}),fetch("".concat(l,"/WorkItems?$filter=").concat(encodeURIComponent(m+" and StateCategory eq 'Completed'"),"&$apply=groupby((IterationPath),aggregate($count as ItemsCompleted, StoryPoints with sum as StoryPointsCompleted))&$orderby=StoryPointsCompleted desc&$top=10"),{headers:d})];console.log("\ud83d\udd27 Analytics API: Fetching server-side aggregations...");const u=await Promise.all(g);for(let e=0;e<u.length;e++)u[e].ok||console.warn("Analytics aggregation request ".concat(e," failed:"),u[e].statusText);const[y,p,h,C,I,P]=await Promise.all(u.map((e=>e.ok?e.json():{value:[]}))),A=(null===(s=y.value)||void 0===s?void 0:s[0])||{TotalItems:0,TotalStoryPoints:0},f=(null===(c=p.value)||void 0===c?void 0:c[0])||{CompletedItems:0,CompletedStoryPoints:0},S=(null===(r=h.value)||void 0===r?void 0:r[0])||{AvgCycleTime:0},v=(null===(i=C.value)||void 0===i?void 0:i[0])||{AvgLeadTime:0},D=(I.value||[]).map((e=>({weekStartDate:this.convertDateSKToDate(e.CompletedDateSK),itemsCompleted:e.ItemsCompleted||0,storyPointsCompleted:e.StoryPointsCompleted||0}))),w=(P.value||[]).map((e=>({iterationPath:e.IterationPath||"Unknown",storyPointsCompleted:e.StoryPointsCompleted||0,itemsCompleted:e.ItemsCompleted||0})));return{success:!0,data:{totalItems:A.TotalItems||0,completedItems:f.CompletedItems||0,totalStoryPoints:A.TotalStoryPoints||0,completedStoryPoints:f.CompletedStoryPoints||0,avgCycleTime:S.AvgCycleTime||0,avgLeadTime:v.AvgLeadTime||0,p50CycleTime:0,p85CycleTime:0,p95CycleTime:0,throughputByWeek:D,velocityTrend:w}}}catch(l){return{success:!1,error:l instanceof Error?l.message:"Unknown error occurred"}}}async fetchCycleTimePercentiles(e,t,a,o,n){try{const s=this.getAnalyticsBaseUrl(e),c=this.getAuthHeaders(a);let r="Project/ProjectName eq '".concat(t,"' and CycleTimeDays ne null and StateCategory eq 'Completed'");if(o&&(r+=" and startswith(AreaPath, '".concat(t,"\\").concat(o,"')")),n){const e=parseInt(n.startDate.replace(/-/g,"")),t=parseInt(n.endDate.replace(/-/g,""));r+=" and DateSK ge ".concat(e," and DateSK le ").concat(t)}const i="".concat(s,"/WorkItems?$filter=").concat(encodeURIComponent(r),"&$select=CycleTimeDays&$orderby=CycleTimeDays"),l=await fetch(i,{headers:c});if(!l.ok)return{success:!1,error:"Cycle time percentiles failed: ".concat(l.status," ").concat(l.statusText)};const d=((await l.json()).value||[]).map((e=>e.CycleTimeDays)).filter((e=>e>0));if(0===d.length)return{success:!0,data:{p50:0,p85:0,p95:0}};const m=(e,t)=>{const a=Math.ceil(t/100*e.length)-1;return e[Math.max(0,a)]};return{success:!0,data:{p50:m(d,50),p85:m(d,85),p95:m(d,95)}}}catch(s){return{success:!1,error:s instanceof Error?s.message:"Unknown error occurred"}}}convertDateSKToDate(e){const t=e.toString(),a=t.substring(0,4),o=t.substring(4,6),n=t.substring(6,8);return"".concat(a,"-").concat(o,"-").concat(n)}async testAnalyticsConnection(e,t,a){try{const o=this.getAnalyticsBaseUrl(e),n=this.getAuthHeaders(a),s=await fetch("".concat(o,"/WorkItems?$filter=Project/ProjectName eq '").concat(t,"'&$top=1&$select=WorkItemId"),{headers:n});return s.ok?{success:!0}:{success:!1,error:"Analytics API connection failed: ".concat(s.status," ").concat(s.statusText)}}catch(o){return{success:!1,error:o instanceof Error?o.message:"Unknown error occurred"}}}async fetchTeamMemberMetrics(e,t,a,o,n){try{const c=this.getAnalyticsBaseUrl(e),r=this.getAuthHeaders(a);let i="Project/ProjectName eq '".concat(t,"' and AssignedToUserName ne null");if(o&&(i+=" and startswith(AreaPath, '".concat(t,"\\").concat(o,"')")),n){const e=parseInt(n.startDate.replace(/-/g,"")),t=parseInt(n.endDate.replace(/-/g,""));i+=" and DateSK ge ".concat(e," and DateSK le ").concat(t)}const l="groupby((AssignedToUserName),aggregate(\n        $count as TotalItems,\n        StoryPoints with sum as TotalStoryPoints,\n        CycleTimeDays with average as AvgCycleTime,\n        LeadTimeDays with average as AvgLeadTime\n      ))",d="".concat(c,"/WorkItems?$filter=").concat(encodeURIComponent(i),"&$apply=").concat(encodeURIComponent(l));console.log("Analytics API: Fetching team member metrics with server-side grouping:",d);const m=await fetch(d,{headers:r});if(!m.ok)return{success:!1,error:"Analytics API failed: ".concat(m.status," ").concat(m.statusText)};const g=((await m.json()).value||[]).map((e=>({assignedTo:e.AssignedToUserName||"Unassigned",totalItems:e.TotalItems||0,completedItems:0,activeItems:0,totalStoryPoints:e.TotalStoryPoints||0,completedStoryPoints:0,avgCycleTime:e.AvgCycleTime||0,avgLeadTime:e.AvgLeadTime||0,completionRate:0})));for(const e of g)try{let a="Project/ProjectName eq '".concat(t,"' and AssignedToUserName eq '").concat(e.assignedTo,"' and StateCategory eq 'Completed'");if(o&&(a+=" and startswith(AreaPath, '".concat(t,"\\").concat(o,"')")),n){const e=parseInt(n.startDate.replace(/-/g,"")),t=parseInt(n.endDate.replace(/-/g,""));a+=" and DateSK ge ".concat(e," and DateSK le ").concat(t)}const s="aggregate($count as CompletedItems, StoryPoints with sum as CompletedStoryPoints)",i="".concat(c,"/WorkItems?$filter=").concat(encodeURIComponent(a),"&$apply=").concat(encodeURIComponent(s)),l=await fetch(i,{headers:r});if(l.ok){const t=await l.json();t.value&&t.value.length>0&&(e.completedItems=t.value[0].CompletedItems||0,e.completedStoryPoints=t.value[0].CompletedStoryPoints||0)}let d="Project/ProjectName eq '".concat(t,"' and AssignedToUserName eq '").concat(e.assignedTo,"' and StateCategory eq 'InProgress'");if(o&&(d+=" and startswith(AreaPath, '".concat(t,"\\").concat(o,"')")),n){const e=parseInt(n.startDate.replace(/-/g,"")),t=parseInt(n.endDate.replace(/-/g,""));d+=" and DateSK ge ".concat(e," and DateSK le ").concat(t)}const m="aggregate($count as ActiveItems)",g="".concat(c,"/WorkItems?$filter=").concat(encodeURIComponent(d),"&$apply=").concat(encodeURIComponent(m)),u=await fetch(g,{headers:r});if(u.ok){const t=await u.json();t.value&&t.value.length>0&&(e.activeItems=t.value[0].ActiveItems||0)}e.completionRate=e.totalItems>0?e.completedItems/e.totalItems*100:0}catch(s){console.warn("Failed to fetch additional metrics for ".concat(e.assignedTo,":"),s)}return{success:!0,data:g,count:g.length}}catch(s){return{success:!1,error:s instanceof Error?s.message:"Unknown error occurred"}}}async fetchVelocityTrends(e,t,a,o,n){try{const s=this.getAnalyticsBaseUrl(e),c=this.getAuthHeaders(a);let r="Project/ProjectName eq '".concat(t,"' and StateCategory eq 'Completed'");if(o&&(r+=" and startswith(AreaPath, '".concat(t,"\\").concat(o,"')")),n){const e=parseInt(n.startDate.replace(/-/g,"")),t=parseInt(n.endDate.replace(/-/g,""));r+=" and DateSK ge ".concat(e," and DateSK le ").concat(t)}const i="groupby((IterationPath),aggregate(\n        $count as ItemsCompleted,\n        StoryPoints with sum as StoryPointsCompleted\n      ))",l="".concat(s,"/WorkItems?$filter=").concat(encodeURIComponent(r),"&$apply=").concat(encodeURIComponent(i),"&$orderby=IterationPath");console.log("Analytics API: Fetching velocity trends with server-side grouping:",l);const d=await fetch(l,{headers:c});if(!d.ok)return{success:!1,error:"Analytics API failed: ".concat(d.status," ").concat(d.statusText)};const m=((await d.json()).value||[]).map((e=>({iterationPath:e.IterationPath||"Unknown",storyPointsCompleted:e.StoryPointsCompleted||0,itemsCompleted:e.ItemsCompleted||0,startDate:"",endDate:""})));return{success:!0,data:m,count:m.length}}catch(s){return{success:!1,error:s instanceof Error?s.message:"Unknown error occurred"}}}async fetchThroughputAnalysis(e,t,a,o,n){try{const s=this.getAnalyticsBaseUrl(e),c=this.getAuthHeaders(a);let r="Project/ProjectName eq '".concat(t,"' and StateCategory eq 'Completed' and ClosedDate ne null");o&&(r+=" and startswith(AreaPath, '".concat(t,"\\").concat(o,"')")),n&&(r+=" and ClosedDate ge ".concat(n.startDate,"Z and ClosedDate le ").concat(n.endDate,"Z"));const i="groupby((year(ClosedDate), weekofyear(ClosedDate)),aggregate(\n        $count as ItemsCompleted,\n        StoryPoints with sum as StoryPointsCompleted\n      ))",l="".concat(s,"/WorkItems?$filter=").concat(encodeURIComponent(r),"&$apply=").concat(encodeURIComponent(i));console.log("Analytics API: Fetching throughput analysis with server-side date grouping:",l);const d=await fetch(l,{headers:c});if(!d.ok)return{success:!1,error:"Analytics API failed: ".concat(d.status," ").concat(d.statusText)};const m=((await d.json()).value||[]).map((e=>({weekStartDate:"".concat(e.year||(new Date).getFullYear(),"-W").concat(e.weekofyear||1),itemsCompleted:e.ItemsCompleted||0,storyPointsCompleted:e.StoryPointsCompleted||0})));return{success:!0,data:m,count:m.length}}catch(s){return{success:!1,error:s instanceof Error?s.message:"Unknown error occurred"}}}async fetchAgingAnalysis(e,t,a,o){try{const n=this.getAnalyticsBaseUrl(e),s=this.getAuthHeaders(a);let c="Project/ProjectName eq '".concat(t,"' and StateCategory ne 'Completed' and Age gt 0");o&&(c+=" and startswith(AreaPath, '".concat(t,"\\").concat(o,"')"));const r="groupby((\n        case(Age le 7: '0-7 days',\n             Age le 14: '8-14 days', \n             Age le 30: '15-30 days',\n             Age le 60: '31-60 days',\n             '60+ days')\n      ),aggregate(\n        $count as Count,\n        StoryPoints with average as AvgStoryPoints\n      ))",i="".concat(n,"/WorkItems?$filter=").concat(encodeURIComponent(c),"&$apply=").concat(encodeURIComponent(r));console.log("Analytics API: Fetching aging analysis with server-side age grouping:",i);const l=await fetch(i,{headers:s});if(!l.ok)return{success:!1,error:"Analytics API failed: ".concat(l.status," ").concat(l.statusText)};const d=((await l.json()).value||[]).map((e=>({ageRange:e.ageRange||"Unknown",count:e.Count||0,avgStoryPoints:e.AvgStoryPoints||0})));return{success:!0,data:d,count:d.length}}catch(n){return{success:!1,error:n instanceof Error?n.message:"Unknown error occurred"}}}}}}]);
//# sourceMappingURL=942.e820436f.chunk.js.map